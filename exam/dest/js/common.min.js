/* jshint node: true */
'use strict()';


var $carousels = document.querySelectorAll('.carousel__container');

for (var i = 0; i <= $carousels.length - 1; i++) {
  carousel($carousels[i], { 
    picturesVisible: 1,
    pictureWidthPixels: 300,
    gutterPixels: 20,
    durationAnimation: 250,
    initialIndex: i
  });
}

// [].forEach.call($carousels, function(item){
//   carousel(item, { 
//     picturesVisible: 1,
//     pictureWidthPixels: 300,
//     gutterPixels: 20,
//     durationAnimation: 250
//   });
// });



function carousel(el, options) {

  var defaults = {
    picturesVisible: 4,
    pictureWidthPixels: 100,
    gutterPixels: 15,
    durationAnimation: 1000,
    initialIndex: 0
  };
  var settings = extend(defaults, options);

  // Присвоение Объектов
  var page = document.querySelector('.page');
  var pageSizer = document.querySelector('.page__sizer');
  var container = el;
  var carouselHider = container.querySelector('.carousel__hider');
  var carouselList = carouselHider.querySelector('.carousel__list');
  var $carouselElements = carouselList.querySelectorAll('.carousel__element');
  var $carouselImages = carouselList.querySelectorAll('.carousel__element-img');

  var btnLeft = container.querySelector('.carousel__controls-prev');
  var btnRight = container.querySelector('.carousel__controls-next');
  // END Присвоение Объектов.

  // Объявление Ширины
  var pageWidth = page.clientWidth;
  var hiderWidth;
  
  var list = {
    bgImageWidth: 358,
    shiftStep: 0,
    leftmostPosition: -1000,
    rightmostPosition: 0,
    currentPosition: 0,
    prevPosition: 0,
    currentItem: settings.initialIndex
  };
  
  // var showElementsStartingFrom; // Если мы в режиме "карусель", то с какого элемента начинаются отображаемые элемены. Нумерация с 1.
  // END Объявление Ширины
  

  var noElementsTotal = $carouselElements.length;
  var noElementsShown = settings.picturesVisible;
  var noElementsHidden = noElementsTotal - noElementsShown;
  // showElementsStartingFrom = 1; // Нумерация порядковых номеров элементов, начиная с 1.
  

  var initialWidth = window.innerWidth;
  applyWidth();
  // window.addEventListener('resize', applyWidth);
  window.addEventListener('resize', function(event){
    if (initialWidth != window.innerWidth) {
      applyWidth();
      initialWidth = window.innerWidth;
    }
    return event;
  });
  
  
  container.style.visibility = 'visible';


  var finishedShiftAnimation = true;

  btnLeft.addEventListener('click', function() {
    if ( !finishedShiftAnimation ) {return false;}
    list.prevPosition = list.currentPosition;
    if ( list.currentPosition < list.rightmostPosition ) {
      list.currentPosition += list.shiftStep;
      list.currentItem--;
    } else {
      list.currentPosition = list.leftmostPosition;
      list.currentItem = noElementsTotal - 1;
    }
    animateShift(carouselList, list.prevPosition, list.currentPosition, settings.durationAnimation);
  });

  btnRight.addEventListener('click', function() {
    if ( !finishedShiftAnimation ) {return false;}
    list.prevPosition = list.currentPosition;
    if ( list.currentPosition > list.leftmostPosition ) {
      list.currentPosition -= list.shiftStep;
      list.currentItem++;
    } else {
      list.currentPosition = list.rightmostPosition;
      list.currentItem = 0;
    }
    animateShift(carouselList, list.prevPosition, list.currentPosition, settings.durationAnimation);
  });


  function checkWidthChange(target){

  }

  function applyWidth(){
    
    var pageMarginLeft = parseInt(getComputedStyle(pageSizer).marginLeft) + parseInt(getComputedStyle(pageSizer).paddingLeft);
    var pageMarginRight = parseInt(getComputedStyle(pageSizer).marginRight) + parseInt(getComputedStyle(pageSizer).paddingRight);
    var pageMargins = pageMarginLeft + pageMarginRight;
    var pageSizerWidth = pageSizer.offsetWidth;
    // var pageSizerWidth = pageSizer.scrollWidth;

    list.bgImageWidth = page.offsetWidth >= 768 ? 620 : 358;
    // list.bgImageWidth = page.scrollWidth >= 768 ? 620 : 358;

    hiderWidth = Math.min(
      list.bgImageWidth, 
      (page.offsetWidth >= 768 ? 
        pageSizerWidth / 3 :
        page.offsetWidth - pageMargins)
      // (page.scrollWidth >= 768 ? 
      //   pageSizerWidth / 3 :
      //   page.scrollWidth - pageMargins)
    ); 
    
    settings.pictureWidthPixels = Math.min(
      list.bgImageWidth,
      hiderWidth
    );
    
    carouselHider.style.width = hiderWidth + 'px';
  
    [].forEach.call($carouselElements, function(item) {
      item.style.marginRight = settings.gutterPixels + 'px';
      item.style.width = settings.pictureWidthPixels + 'px';
    });
  
    // Смещаем кинопленку со слайдами.
    list.shiftStep = settings.pictureWidthPixels + settings.gutterPixels;
    list.leftmostPosition = - ( list.shiftStep * noElementsHidden );
    list.currentPosition = list.rightmostPosition - list.shiftStep * list.currentItem;
    carouselList.style.left = list.currentPosition + 'px';
  }

  function animateShift(item, from, to, duration) {
    var start = Date.now();
    finishedShiftAnimation = false;
    var fps = 50;

    var timer = setInterval(function() {
      var timePassed = Date.now() - start;

      if ( timePassed >= duration ) {
        clearInterval(timer);
        draw(duration);
        finishedShiftAnimation = true;
        return;
      }

      draw(timePassed); // рисует состояние анимации, соответствующее времени timePassed

    }, (duration / fps));

    function draw(timePassed) {
      item.style.left = (timePassed / duration) * (to - from) + from + 'px';
    }

  }

  return el;
}

/**
 * Extend object a with the properties of object b.
 * If there's a conflict, object b takes precedence.
 *
 * @param {Object} a - The first object to merge
 * @param {Object} b - The second object to merge (takes precedence)
 * @api private
 */
function extend(a, b) {

  for (var i in b) {
    a[i] = b[i];
  }

  return a;
}

function ready() {
  showResults();
}

document.addEventListener('DOMContentLoaded', ready);
/* jshint node: true */
'use strict()';

var input = document.getElementById('search__text');
var btn = document.getElementById('search__button');
var body = document.getElementById('body');
var ideas = document.getElementById('ideas');
var msnryContainer = document.getElementById('search__result');

input.addEventListener('keydown', waitForEnterKey);
btn.addEventListener('click', showResults);

function waitForEnterKey(e){
  if (e.target.id == 'search__text' && (e.type == 'keydown' || e.type == 'keypress') && e.keyCode == 13) {
    // e.target.blur();
    showResults();
    e.preventDefault();
  }
}


function showResults(e) {

  var searchString = input.value;
  var searchText = encodeURIComponent(searchString.trim().replace(/(\s+)/g,'+'));
  var userRequest = new XMLHttpRequest();


  var totalImagesNeeded = 7;
  var API_KEY = '5116679-27723e47bc3390bc786097a34';
  var perPage = totalImagesNeeded + Math.floor( (totalImagesNeeded + 1) * Math.random() );
  var page = 1 + Math.floor( Math.floor(500/perPage) * Math.random() );
  var xhrURL = 'https://pixabay.com/api/?key=' + API_KEY +
            '&image_type=photo' +
            '&min_width=320' + '&min_height=120' +
            '&orientation=horizontal' + // Accepted values: "all", "horizontal", "vertical". Default: "all".
            // '&order=latest' + // Accepted values: "popular", "latest". Default: "popular".
            // '&safesearch=true' + // A flag indicating that only images suitable for all ages should be returned. Accepted values: "true", "false". Default: "false".
            '&per_page=' + perPage + 
            '&page=' + page +
            '&q=' + searchText;

  userRequest.onreadystatechange = function() {
    
    if ( userRequest.readyState == 4 ) {
      if ( userRequest.status == 200 ) {
        var data = JSON.parse(userRequest.responseText);
        var html, imgTitle;

        if (data.total === 0) {
          // Server reply is empty:
          html = '<p class="warning">[ No images for your request ! ]</p>';
        } else {
          html = '<li class="msnry__sizer"></li><li class="msnry__gutter-sizer"></li>';
          var widerImageIndex1, widerImageIndex2;

          widerImageIndex1 = Math.floor( totalImagesNeeded * Math.random() );
          do {
            widerImageIndex2 = Math.floor( totalImagesNeeded * Math.random() );
          } while ( 
            widerImageIndex1 === widerImageIndex2 || 
            /* It's OK to have 2 last items not fit all row by Masonry's philosophy. 
            But for further beatifiyng I forbid having such case. Next row maintains this:*/
            (widerImageIndex1 + widerImageIndex2 === ((totalImagesNeeded - 1) * 2 - 1)) 
          );

          for ( i = 0 ; i < Math.min(totalImagesNeeded, data.hits.length); i++) {
            imgTitle = data.hits[i].tags;
            /*Uncomment next line to limit text to 2 first phrases:*/
            /*imgTitle = imgTitle.substring(0, imgTitle.indexOf(",",imgTitle.indexOf(",",0)+1)); */

            htmlItemClass = '"ideas__item msnry__item"';
            if ( i === widerImageIndex1 || i === widerImageIndex2 ) {
              htmlItemClass = '"ideas__item msnry__item msnry__item-width2"';
            }

            html += '<li class=' + htmlItemClass + ' style="background: url(' + data.hits[i].webformatURL + ') no-repeat center; background-size: cover;" alt="image">';
            html +=   '<h3 class="ideas__title">' + imgTitle + '</h3>';
            html += '</li>';
          }
        }
      
        // Masonry initialize:
        msnryContainer.innerHTML = html;
        imagesLoaded( '.ideas__img', function() {
          var msnry = new Masonry( msnryContainer, {
            itemSelector: '.msnry__item',
            columnWidth: '.msnry__sizer',
            gutter: '.msnry__gutter-sizer',
            percentPosition: true
          });

        }); // END Masonry initialize
      }     // END if ( userRequest.status == 200 )
    }       // END if ( userRequest.readyState == 4 )
  };        // END userRequest.onreadystatechange
  
  userRequest.open('POST', xhrURL, true);
  userRequest.send();

  if (e !== undefined) {
    e.target.blur();
    e.preventDefault();
    scrollPageAnimated(body, 'scrollTop', '', body.scrollTop, ideas.offsetTop, 200, true);
  }

}

function scrollPageAnimated(elem, style, unit, from, to, time, prop) {
  if (!elem) {
    return;
  }

  var start = new Date().getTime();
  var timer = setInterval(function () {
    var step = Math.min(1, (new Date().getTime() - start) / time);
    if (prop) {
      elem[style] = (from + step * (to - from))+unit;
    } else {
      elem.style[style] = (from + step * (to - from))+unit;
    }
    if (step === 1) {
      clearInterval(timer);
    }
  }, 25);
  if (prop) {
    elem[style] = from+unit;
  } else {
    elem.style[style] = from+unit;
  }
}