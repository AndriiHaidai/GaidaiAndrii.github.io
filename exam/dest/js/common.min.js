/* jshint node: true */
'use strict()';


var $carousels = document.querySelectorAll('.carousel__container');

for (var i = 0; i <= $carousels.length - 1; i++) {
  $carousels[i]
}

[].forEach.call($carousels, function(item){
  carousel(item, { 
    picturesVisible: 1,
    pictureWidthPixels: 300,
    gutterPixels: 20,
    durationAnimation: 250
  });
});



function carousel(el, options) {

  var defaults = {
    picturesVisible: 4,
    pictureWidthPixels: 100,
    gutterPixels: 15,
    durationAnimation: 1000
  };
  var settings = extend(defaults, options);

  // Присвоение Объектов
  var page = document.querySelector('.page');
  var pageWrapper = document.querySelector('.page__wrapper');
  var container = el;
  var carouselHider = container.querySelector('.carousel__hider');
  var carouselList = carouselHider.querySelector('.carousel__list');
  var $carouselElements = carouselList.querySelectorAll('.carousel__element');
  var $carouselImages = carouselList.querySelectorAll('.carousel__element-img');

  var btnLeft = container.querySelector('.carousel__controls-prev');
  var btnRight = container.querySelector('.carousel__controls-next');
  // END Присвоение Объектов.

  // Объявление Ширины
  var pageWidth = page.clientWidth;
  var hiderWidth;
  
  var list = {
    bgImageWidth: 358,
    shiftStep: 0,
    leftmostPosition: -1000,
    rightmostPosition: 0,
    currentPosition: 0,
    prevPosition: 0,
    currentItem: 0
  };
  
  var noElementsTotal;
  var noElementsShown;
  var noElementsHidden;
  // var showElementsStartingFrom; // Если мы в режиме "карусель", то с какого элемента начинаются отображаемые элемены. Нумерация с 1.
  // END Объявление Ширины
  

  noElementsTotal = $carouselElements.length;
  noElementsShown = settings.picturesVisible;
  noElementsHidden = noElementsTotal - noElementsShown;
  // showElementsStartingFrom = 1; // Нумерация порядковых номеров элементов, начиная с 1.
  

  // settings.pictureMaxWidthPixels = 358;

  var initialWidth = window.innerWidth;
  applyWidth();
  // window.addEventListener('resize', applyWidth);
  window.addEventListener('resize', function(event){
    if (initialWidth != window.innerWidth) {
      applyWidth();
      initialWidth = window.innerWidth;
    }
    return event;
  });
  
  
  container.style.visibility = 'visible';


  var finishedShiftAnimation = true;

  btnLeft.addEventListener('click', function() {
    if ( !finishedShiftAnimation ) {return false;}
    list.prevPosition = list.currentPosition;
    if ( list.currentPosition < list.rightmostPosition ) {
      list.currentPosition += list.shiftStep;
      list.currentItem--;
    } else {
      list.currentPosition = list.leftmostPosition;
      list.currentItem = noElementsTotal - 1;
    }
    animateShift(carouselList, list.prevPosition, list.currentPosition, settings.durationAnimation);
  });

  btnRight.addEventListener('click', function() {
    if ( !finishedShiftAnimation ) {return false;}
    list.prevPosition = list.currentPosition;
    if ( list.currentPosition > list.leftmostPosition ) {
      list.currentPosition -= list.shiftStep;
      list.currentItem++;
    } else {
      list.currentPosition = list.rightmostPosition;
      list.currentItem = 0;
    }
    animateShift(carouselList, list.prevPosition, list.currentPosition, settings.durationAnimation);
  });


  function checkWidthChange(target){

  }

  function applyWidth(){
    
    var pageMarginLeft = parseInt(getComputedStyle(pageWrapper).marginLeft);
    var pageMarginRight = parseInt(getComputedStyle(pageWrapper).marginRight);
    var pageMargins = pageMarginLeft + pageMarginRight;
    var pageWrapperWidth = pageWrapper.offsetWidth;

    list.bgImageWidth = page.offsetWidth >= 768 ? 620 : 358;

    hiderWidth = Math.min(
      list.bgImageWidth, 
      (page.offsetWidth >= 768 ? 
        pageWrapperWidth / 3 :
        page.offsetWidth - pageMargins)
    ); 
    
    settings.pictureWidthPixels = Math.min(
      list.bgImageWidth,
      hiderWidth
    );
    
    carouselHider.style.width = hiderWidth + 'px';
  
    [].forEach.call($carouselElements, function(item) {
      item.style.marginRight = settings.gutterPixels + 'px';
      item.style.width = settings.pictureWidthPixels + 'px';
    });
  
    // Смещаем кинопленку со слайдами.
    list.shiftStep = settings.pictureWidthPixels + settings.gutterPixels;
    list.leftmostPosition = - ( list.shiftStep * noElementsHidden );
    list.currentPosition = list.rightmostPosition - list.shiftStep * list.currentItem;
    carouselList.style.left = list.currentPosition + 'px';
  }

  function animateShift(item, from, to, duration) {
    var start = Date.now();
    finishedShiftAnimation = false;
    var fps = 50;

    var timer = setInterval(function() {
      var timePassed = Date.now() - start;

      if ( timePassed >= duration ) {
        clearInterval(timer);
        draw(duration);
        finishedShiftAnimation = true;
        return;
      }

      draw(timePassed); // рисует состояние анимации, соответствующее времени timePassed

    }, (duration / fps));

    function draw(timePassed) {
      item.style.left = (timePassed / duration) * (to - from) + from + 'px';
    }

  }

  return el;
}

/**
 * Extend object a with the properties of object b.
 * If there's a conflict, object b takes precedence.
 *
 * @param {Object} a - The first object to merge
 * @param {Object} b - The second object to merge (takes precedence)
 * @api private
 */
function extend(a, b) {

  for (var i in b) {
    a[i] = b[i];
  }

  return a;
}

function ready() {
  showResults();
}

document.addEventListener('DOMContentLoaded', ready);
/* jshint node: true */
'use strict()';

var input = document.getElementById('search__text');
var btn = document.getElementById('search__button');
var body = document.getElementById('body');
var ideas = document.getElementById('ideas');
var msnryContainer = document.getElementById('search__result');

input.addEventListener('keydown', waitForEnterKey);
btn.addEventListener('click', showResults);

function waitForEnterKey(e){
  if (e.target.id == 'search__text' && (e.type == 'keydown' || e.type == 'keypress') && e.keyCode == 13) {
    e.preventDefault();
    showResults();
  }
}


function showResults() {

  var searchText = input.value;
  var userRequest = new XMLHttpRequest();

  userRequest.onreadystatechange = function() {
    
    if (userRequest.readyState == 4 && userRequest.status == 200) {
      var data = JSON.parse(userRequest.responseText);

      var imgUrl;
      var imgTitle;
      var html = '';
      console.log('data: ', data);

      for ( i = 0 ; i < Math.min(7, data.hits.length); ) {
        imgUrl = data.hits[i].webformatURL;
        imgTitle = data.hits[i].tags;
        imgTitle = imgTitle.substring(0, imgTitle.indexOf(",",imgTitle.indexOf(",",0)+1)); // Now limit text to 2 first phrases.
        // webformatHeight
        // webformatWidth 
/*
        html += '<li class="ideas__item">';
        html +=   '<img class="ideas__img" src="' + imgUrl + '" alt="image ' + (++i) + ' of ' + searchText + '">';
        html +=   '<h3 class="ideas__title">' + imgTitle + '</h3>';
        html += '</li>';
*/
        htmlItemClass = '"ideas__item msnry__item"';
        htmlItemStyle = '"background: url(' + imgUrl + ') no-repeat center; background-size: cover;"';

        html += '<li class=' + htmlItemClass + ' style=' + htmlItemStyle + ' alt="image ' + (++i) + ' of ' + searchText + '">';
        html +=   '<h3 class="ideas__title">' + imgTitle + '</h3>';
        html += '</li>';
      }
    
      msnryContainer.innerHTML = html;
      
      
      imagesLoaded( '.ideas__img', function() {
      
        var msnry = new Masonry( msnryContainer, {
          // options
          itemSelector: '.msnry__item',
          columnWidth: '.msnry__item',
        //   // - If columnWidth is not set, Masonry will use the outer width of the first item.
        //   // - Как его к сетке Susy привязать?
          // gutter: '.msnry__gutter',
          gutter: 20,
          percentPosition: true
        });

        body.scrollTop = ideas.offsetTop;
      });
      msnry.layout();

      // imagesLoaded( 'ideas__item', function() {
        // msnryContainer.innerHTML = html;
        // body.scrollTop = ideas.offsetTop;
      // });

    }
  };

  var API_KEY = '5116679-27723e47bc3390bc786097a34';
  var perPage = 7 + Math.floor( 8 * Math.random() );
  var page = 1 + Math.floor( Math.floor(500/perPage) * Math.random() );
  var URL = 'https://pixabay.com/api/?key=' + API_KEY +
            '&image_type=photo' +
            '&min_width=320' + '&min_height=120' +
            '&orientation=horizontal' + // Accepted values: "all", "horizontal", "vertical". Default: "all".
            // '&order=latest' + // Accepted values: "popular", "latest".
            // '&safesearch=true' + // A flag indicating that only images suitable for all ages should be returned. Accepted values: "true", "false". Default: "false".
            '&per_page=' + perPage + 
            '&page=' + page +
            '&q=' + searchText;
  // userRequest.open('GET', 'https://api.tenor.co/v1/search?tag=' + searchText + '&key=LIVDSRZULELA');
  userRequest.open('GET', URL);
  userRequest.send();
}
